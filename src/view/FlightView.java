/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.FlightController;
import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Formation
 */
public class FlightView extends javax.swing.JPanel {

    private Boolean isPLanned;
    private JOptionPane optionPane;
    FlightController flightController;
    ArrayList<Long> pilotes;
    ArrayList<Long> copilotes;
    ArrayList<Long> staff;

    /**
     * Constructor
     * @param flightController
     * @param isPLanned True if section "Vols programmés"
     */
    public FlightView(FlightController flightController, Boolean isPLanned) {
        this.isPLanned = isPLanned;
        this.flightController = flightController;
        this.optionPane = new JOptionPane();
        initComponents();
        
            // Add lines on the jTable
        jt_listFlight = this.flightController.addRowTable(jt_listFlight, isPLanned);
        
            // Fills combobox
        this.flightController.addCombobox(cb_cityStart, cb_cityArrived, cb_pilote, cb_copilote, cb_staff1, cb_staff2, cb_staff3);
        
            // Textfields not editable
        tf_numFlight.setEditable(false);
        tf_IATAArrived.setEditable(false);
        tf_IATAStart.setEditable(false);
        tf_countryArrived.setEditable(false);
        tf_countryStart.setEditable(false);
        tf_dateArrived.setEditable(false);
        tf_hoursArrived.setEditable(false);
        // If is planned, textefield is not editable
        planned(isPLanned);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jp_table = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jt_listFlight = new javax.swing.JTable();
        jp_info = new javax.swing.JPanel();
        jp_left = new javax.swing.JPanel();
        lb_numFlight = new javax.swing.JLabel();
        lb_cityStart = new javax.swing.JLabel();
        lb_countryStart = new javax.swing.JLabel();
        lb_IATAStart = new javax.swing.JLabel();
        lb_cityArrived = new javax.swing.JLabel();
        lb_countryArrived = new javax.swing.JLabel();
        lb_IATAArrived = new javax.swing.JLabel();
        lb_dateStart = new javax.swing.JLabel();
        lb_hoursStart = new javax.swing.JLabel();
        tf_numFlight = new javax.swing.JTextField();
        cb_cityStart = new javax.swing.JComboBox<>();
        tf_countryStart = new javax.swing.JTextField();
        tf_IATAStart = new javax.swing.JTextField();
        cb_cityArrived = new javax.swing.JComboBox<>();
        tf_countryArrived = new javax.swing.JTextField();
        tf_IATAArrived = new javax.swing.JTextField();
        tf_dateStart = new javax.swing.JTextField();
        tf_hoursStart = new javax.swing.JTextField();
        jp_right = new javax.swing.JPanel();
        lb_dateArrived = new javax.swing.JLabel();
        lb_hoursArrived = new javax.swing.JLabel();
        lb_time = new javax.swing.JLabel();
        lb_price = new javax.swing.JLabel();
        lb_pilote = new javax.swing.JLabel();
        lb_copilote = new javax.swing.JLabel();
        lb_staff1 = new javax.swing.JLabel();
        lb_staff2 = new javax.swing.JLabel();
        lb_staff3 = new javax.swing.JLabel();
        tf_dateArrived = new javax.swing.JTextField();
        tf_time = new javax.swing.JTextField();
        tf_price = new javax.swing.JTextField();
        cb_copilote = new javax.swing.JComboBox<>();
        cb_pilote = new javax.swing.JComboBox<>();
        cb_staff1 = new javax.swing.JComboBox<>();
        cb_staff2 = new javax.swing.JComboBox<>();
        cb_staff3 = new javax.swing.JComboBox<>();
        tf_hoursArrived = new javax.swing.JTextField();
        jp_button = new javax.swing.JPanel();
        pb_init = new javax.swing.JButton();
        pb_delete = new javax.swing.JButton();
        pb_update = new javax.swing.JButton();
        pb_validate = new javax.swing.JButton();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        jp_table.setMaximumSize(new java.awt.Dimension(32767, 300));
        jp_table.setMinimumSize(new java.awt.Dimension(1000, 300));
        jp_table.setPreferredSize(new java.awt.Dimension(1000, 300));
        jp_table.setLayout(new java.awt.GridLayout(1, 0));

        jt_listFlight.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N°", "Ville départ", "Pays départ", "AITA départ", "Ville arrivée", "Pays arrivée", "AITA arrivée", "Date / Heures départ", "Date / heure arrivée", "Durée (min)", "Tarif (€)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jt_listFlight.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jt_listFlight.getTableHeader().setReorderingAllowed(false);
        jt_listFlight.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jt_listFlightMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jt_listFlight);
        if (jt_listFlight.getColumnModel().getColumnCount() > 0) {
            jt_listFlight.getColumnModel().getColumn(0).setResizable(false);
            jt_listFlight.getColumnModel().getColumn(0).setPreferredWidth(45);
            jt_listFlight.getColumnModel().getColumn(1).setResizable(false);
            jt_listFlight.getColumnModel().getColumn(1).setPreferredWidth(125);
            jt_listFlight.getColumnModel().getColumn(2).setResizable(false);
            jt_listFlight.getColumnModel().getColumn(2).setPreferredWidth(125);
            jt_listFlight.getColumnModel().getColumn(3).setResizable(false);
            jt_listFlight.getColumnModel().getColumn(3).setPreferredWidth(80);
            jt_listFlight.getColumnModel().getColumn(4).setResizable(false);
            jt_listFlight.getColumnModel().getColumn(4).setPreferredWidth(125);
            jt_listFlight.getColumnModel().getColumn(5).setResizable(false);
            jt_listFlight.getColumnModel().getColumn(5).setPreferredWidth(125);
            jt_listFlight.getColumnModel().getColumn(6).setResizable(false);
            jt_listFlight.getColumnModel().getColumn(6).setPreferredWidth(80);
            jt_listFlight.getColumnModel().getColumn(7).setResizable(false);
            jt_listFlight.getColumnModel().getColumn(7).setPreferredWidth(150);
            jt_listFlight.getColumnModel().getColumn(8).setResizable(false);
            jt_listFlight.getColumnModel().getColumn(8).setPreferredWidth(150);
            jt_listFlight.getColumnModel().getColumn(9).setResizable(false);
            jt_listFlight.getColumnModel().getColumn(9).setPreferredWidth(100);
            jt_listFlight.getColumnModel().getColumn(10).setResizable(false);
            jt_listFlight.getColumnModel().getColumn(10).setPreferredWidth(100);
        }

        jp_table.add(jScrollPane1);

        add(jp_table);

        jp_info.setLayout(new java.awt.GridBagLayout());

        jp_left.setLayout(new java.awt.GridBagLayout());

        lb_numFlight.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lb_numFlight.setText("N° de vol");
        lb_numFlight.setMinimumSize(new java.awt.Dimension(150, 25));
        lb_numFlight.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_left.add(lb_numFlight, gridBagConstraints);

        lb_cityStart.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lb_cityStart.setText("Ville de départ");
        lb_cityStart.setMinimumSize(new java.awt.Dimension(150, 25));
        lb_cityStart.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_left.add(lb_cityStart, gridBagConstraints);

        lb_countryStart.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lb_countryStart.setText("Pays de départ");
        lb_countryStart.setMinimumSize(new java.awt.Dimension(150, 25));
        lb_countryStart.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_left.add(lb_countryStart, gridBagConstraints);

        lb_IATAStart.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lb_IATAStart.setText("Code aéroport de départ");
        lb_IATAStart.setMinimumSize(new java.awt.Dimension(150, 25));
        lb_IATAStart.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_left.add(lb_IATAStart, gridBagConstraints);

        lb_cityArrived.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lb_cityArrived.setText("Ville d'arrivée");
        lb_cityArrived.setMinimumSize(new java.awt.Dimension(150, 25));
        lb_cityArrived.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_left.add(lb_cityArrived, gridBagConstraints);

        lb_countryArrived.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lb_countryArrived.setText("Pays d'arrivée");
        lb_countryArrived.setMinimumSize(new java.awt.Dimension(150, 25));
        lb_countryArrived.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_left.add(lb_countryArrived, gridBagConstraints);

        lb_IATAArrived.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lb_IATAArrived.setText("Code aéroport d'arrivée");
        lb_IATAArrived.setMinimumSize(new java.awt.Dimension(150, 25));
        lb_IATAArrived.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_left.add(lb_IATAArrived, gridBagConstraints);

        lb_dateStart.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lb_dateStart.setText("Date de départ");
        lb_dateStart.setMinimumSize(new java.awt.Dimension(150, 25));
        lb_dateStart.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_left.add(lb_dateStart, gridBagConstraints);

        lb_hoursStart.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lb_hoursStart.setText("Heure de départ");
        lb_hoursStart.setMinimumSize(new java.awt.Dimension(150, 25));
        lb_hoursStart.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_left.add(lb_hoursStart, gridBagConstraints);

        tf_numFlight.setMinimumSize(new java.awt.Dimension(150, 25));
        tf_numFlight.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_left.add(tf_numFlight, gridBagConstraints);

        cb_cityStart.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_cityStart.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_left.add(cb_cityStart, gridBagConstraints);

        tf_countryStart.setMinimumSize(new java.awt.Dimension(150, 25));
        tf_countryStart.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_left.add(tf_countryStart, gridBagConstraints);

        tf_IATAStart.setMinimumSize(new java.awt.Dimension(150, 25));
        tf_IATAStart.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_left.add(tf_IATAStart, gridBagConstraints);

        cb_cityArrived.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_cityArrived.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_left.add(cb_cityArrived, gridBagConstraints);

        tf_countryArrived.setMinimumSize(new java.awt.Dimension(150, 25));
        tf_countryArrived.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_left.add(tf_countryArrived, gridBagConstraints);

        tf_IATAArrived.setMinimumSize(new java.awt.Dimension(150, 25));
        tf_IATAArrived.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_left.add(tf_IATAArrived, gridBagConstraints);

        tf_dateStart.setMinimumSize(new java.awt.Dimension(150, 25));
        tf_dateStart.setPreferredSize(new java.awt.Dimension(150, 25));
        tf_dateStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_dateStartActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_left.add(tf_dateStart, gridBagConstraints);

        tf_hoursStart.setMinimumSize(new java.awt.Dimension(150, 25));
        tf_hoursStart.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_left.add(tf_hoursStart, gridBagConstraints);

        jp_info.add(jp_left, new java.awt.GridBagConstraints());

        jp_right.setLayout(new java.awt.GridBagLayout());

        lb_dateArrived.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lb_dateArrived.setText("Date d'arrivée");
        lb_dateArrived.setMinimumSize(new java.awt.Dimension(150, 25));
        lb_dateArrived.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_right.add(lb_dateArrived, gridBagConstraints);

        lb_hoursArrived.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lb_hoursArrived.setText("Heure d'arrivée");
        lb_hoursArrived.setMinimumSize(new java.awt.Dimension(150, 25));
        lb_hoursArrived.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_right.add(lb_hoursArrived, gridBagConstraints);

        lb_time.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lb_time.setText("Durée en min");
        lb_time.setMinimumSize(new java.awt.Dimension(150, 25));
        lb_time.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_right.add(lb_time, gridBagConstraints);

        lb_price.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lb_price.setText("Tarif en euro");
        lb_price.setMinimumSize(new java.awt.Dimension(150, 25));
        lb_price.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_right.add(lb_price, gridBagConstraints);

        lb_pilote.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lb_pilote.setText("Pilote");
        lb_pilote.setMinimumSize(new java.awt.Dimension(150, 25));
        lb_pilote.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_right.add(lb_pilote, gridBagConstraints);

        lb_copilote.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lb_copilote.setText("Copilote");
        lb_copilote.setMinimumSize(new java.awt.Dimension(150, 25));
        lb_copilote.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_right.add(lb_copilote, gridBagConstraints);

        lb_staff1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lb_staff1.setText("Hotesse / Steward 1");
        lb_staff1.setMinimumSize(new java.awt.Dimension(150, 25));
        lb_staff1.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_right.add(lb_staff1, gridBagConstraints);

        lb_staff2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lb_staff2.setText("Hotesse / Steward 2");
        lb_staff2.setMinimumSize(new java.awt.Dimension(150, 25));
        lb_staff2.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_right.add(lb_staff2, gridBagConstraints);

        lb_staff3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lb_staff3.setText("Hotesse / Steward 3");
        lb_staff3.setMinimumSize(new java.awt.Dimension(150, 25));
        lb_staff3.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_right.add(lb_staff3, gridBagConstraints);

        tf_dateArrived.setMinimumSize(new java.awt.Dimension(150, 25));
        tf_dateArrived.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_right.add(tf_dateArrived, gridBagConstraints);

        tf_time.setMinimumSize(new java.awt.Dimension(150, 25));
        tf_time.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_right.add(tf_time, gridBagConstraints);

        tf_price.setMinimumSize(new java.awt.Dimension(150, 25));
        tf_price.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_right.add(tf_price, gridBagConstraints);

        cb_copilote.setModel(new javax.swing.DefaultComboBoxModel<>());
        cb_copilote.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_copilote.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        jp_right.add(cb_copilote, gridBagConstraints);

        cb_pilote.setModel(new javax.swing.DefaultComboBoxModel<>());
        cb_pilote.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_pilote.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_right.add(cb_pilote, gridBagConstraints);

        cb_staff1.setModel(new javax.swing.DefaultComboBoxModel<>());
        cb_staff1.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_staff1.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        jp_right.add(cb_staff1, gridBagConstraints);

        cb_staff2.setModel(new javax.swing.DefaultComboBoxModel<>());
        cb_staff2.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_staff2.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        jp_right.add(cb_staff2, gridBagConstraints);

        cb_staff3.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_staff3.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        jp_right.add(cb_staff3, gridBagConstraints);

        tf_hoursArrived.setMinimumSize(new java.awt.Dimension(150, 25));
        tf_hoursArrived.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 4, 5, 4);
        jp_right.add(tf_hoursArrived, gridBagConstraints);

        jp_info.add(jp_right, new java.awt.GridBagConstraints());

        jp_button.setMinimumSize(new java.awt.Dimension(350, 30));
        jp_button.setPreferredSize(new java.awt.Dimension(500, 30));
        jp_button.setLayout(new java.awt.GridBagLayout());

        pb_init.setText("réinitialiser");
        pb_init.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pb_initActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jp_button.add(pb_init, gridBagConstraints);

        pb_delete.setText("supprimer");
        pb_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pb_deleteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jp_button.add(pb_delete, gridBagConstraints);

        pb_update.setText("Mettre à jour");
        pb_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pb_updateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jp_button.add(pb_update, gridBagConstraints);

        pb_validate.setText("Valider");
        pb_validate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pb_validateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        jp_button.add(pb_validate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jp_info.add(jp_button, gridBagConstraints);

        add(jp_info);
    }// </editor-fold>//GEN-END:initComponents

    private void tf_dateStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_dateStartActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_dateStartActionPerformed
    
    /**
     * on click "réinitialiser"
     * @param evt 
     */
    private void pb_initActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pb_initActionPerformed
            // If there is no selected line
        if(jt_listFlight.getSelectedRow() == -1){
            return;
        }
            // Get flight id selected
        Object numObject = jt_listFlight.getValueAt(jt_listFlight.getSelectedRow(), 0);
        Long id = Long.parseLong(numObject.toString().substring(2));
        
            // Add flight info in all textfields
        this.flightController.flightInfo(this,id);
    }//GEN-LAST:event_pb_initActionPerformed
    
    /**
     * Selected line on click
     * @param evt 
     */
    private void jt_listFlightMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_listFlightMouseClicked
            // If a line is selected
        if (evt.getClickCount() == 1) {
                // get id of the flight selected
            Object numObject = jt_listFlight.getValueAt(jt_listFlight.getSelectedRow(), 0);
            Long id = Long.parseLong(numObject.toString().substring(2));
            
            // Add file selected in textfield
            this.flightController.flightInfo(this,id);
            
            // Make visible delete button if they are not booking
            boolean isBooking = flightController.isBooking(id);
            pb_delete.setVisible(isBooking);
        }
    }//GEN-LAST:event_jt_listFlightMouseClicked
    
    /**
     * On click "Supprimé"
     * @param evt 
     */
    private void pb_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pb_deleteActionPerformed
        
        if(jt_listFlight.getSelectedRow() == -1){
            return;
        }
        Object numObject = jt_listFlight.getValueAt(jt_listFlight.getSelectedRow(), 0);
        Long id = Long.parseLong(numObject.toString().substring(2));
        
        
        flightController.delete(id);
        
        DefaultTableModel model = (DefaultTableModel) jt_listFlight.getModel();
        model.setRowCount(0);
        flightController.addRowTable(jt_listFlight, isPLanned);
        
    }//GEN-LAST:event_pb_deleteActionPerformed
    
    /**
     * On click "Mettre a jour"
     * @param evt 
     */
    private void pb_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pb_updateActionPerformed
        if(jt_listFlight.getSelectedRow() == -1){
            return;
        }
        Object numObject = jt_listFlight.getValueAt(jt_listFlight.getSelectedRow(), 0);
        Long id = Long.parseLong(numObject.toString().substring(2));
            
      boolean resultUpdate =  flightController.updateDB(getValues(), id);
      
        if(resultUpdate){
            this.optionPane.showMessageDialog(this, "Mise a jour effectuée", "Mise a jour", this.optionPane.INFORMATION_MESSAGE);
        }else{
            this.optionPane.showMessageDialog(this, "Echec de la mise a jour", "Mise a jour", this.optionPane.ERROR_MESSAGE); 
        }
        
        DefaultTableModel model = (DefaultTableModel) jt_listFlight.getModel();
        model.setRowCount(0);
        flightController.addRowTable(jt_listFlight, isPLanned);
        this.flightController.flightInfo(this,id);
    }//GEN-LAST:event_pb_updateActionPerformed
    
    /**
     * On click "Valider"
     * @param evt 
     */
    private void pb_validateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pb_validateActionPerformed
        if (cb_pilote.getSelectedIndex() > 0 && cb_copilote.getSelectedIndex() > 0
                && cb_staff1.getSelectedIndex() > 0 && cb_staff2.getSelectedIndex() > 0
                && cb_staff3.getSelectedIndex() > 0) {
            if (jt_listFlight.getSelectedRow() == -1) {
                return;
            }
            Object numObject = jt_listFlight.getValueAt(jt_listFlight.getSelectedRow(), 0);
            Long id = Long.parseLong(numObject.toString().substring(2));
            flightController.validate(id);
        
            DefaultTableModel model = (DefaultTableModel) jt_listFlight.getModel();
            model.setRowCount(0);
            flightController.addRowTable(jt_listFlight, isPLanned);
            this.optionPane.showMessageDialog(this, "Ce vol est validé", "Validation", this.optionPane.INFORMATION_MESSAGE);
            this.flightController.flightInfo(this,id);
        }
    }//GEN-LAST:event_pb_validateActionPerformed
    
    /**
     * 
     * @param combobox
     * @return 
     */
    public String valueCombobox(JComboBox combobox){
        String value = null;
        if(!combobox.getSelectedItem().toString().isEmpty()){
            value = combobox.getSelectedItem().toString();
        }else{
            value = "0";
        }
        return value;
    }
    
    /**
     * Get value textfiels and combo in a Arraylist
     * @return 
     */
    public ArrayList<String> getValues(){        
        ArrayList<String> flightInfo = new ArrayList<>();
        flightInfo.add(valueCombobox(cb_cityStart));
        flightInfo.add(valueCombobox(cb_cityArrived));
        flightInfo.add(tf_dateStart.getText() + " " + tf_hoursStart.getText());
        flightInfo.add(tf_time.getText());
        flightInfo.add(tf_price.getText());
        flightInfo.add(valueCombobox(cb_pilote));
        flightInfo.add(valueCombobox(cb_copilote));
        flightInfo.add(valueCombobox(cb_staff1));
        flightInfo.add(valueCombobox(cb_staff2));
        flightInfo.add(valueCombobox(cb_staff3));
        
        return flightInfo;
    }
    
    /**
     * Update textfield
     * @param values Array with all value
     */
    public void updateFlighInfo(ArrayList<String> values){
        tf_numFlight.setText("DF" + values.get(0));
        setSelectedValue(cb_cityStart, values.get(1));
        tf_countryStart.setText(values.get(2));
        tf_IATAStart.setText(values.get(3));
        setSelectedValue(cb_cityArrived, values.get(4));
        tf_countryArrived.setText(values.get(5));
        tf_IATAArrived.setText(values.get(6));
        tf_dateStart.setText(values.get(7));
        tf_hoursStart.setText(values.get(8));
        tf_dateArrived.setText(values.get(9));
        tf_hoursArrived.setText(values.get(10));
        tf_time.setText(values.get(11));
        tf_price.setText(values.get(12));
        setSelectedValue(cb_pilote, values.get(13));
        setSelectedValue(cb_copilote, values.get(14));
        setSelectedValue(cb_staff1, values.get(15));
        setSelectedValue(cb_staff2, values.get(16));
        setSelectedValue(cb_staff3, values.get(17));
    }
    
    public void setSelectedValue(JComboBox comboBox, String value)
    {
        for(int i = 0; i < comboBox.getItemCount(); i++){
            if(comboBox.getItemAt(i).equals(value)){
                comboBox.setSelectedIndex(i);
                break;
            } else{
                setSelectedValue(comboBox, "");
            } 
        }
    }
    
    /**
     * If we are on "Vols programmées"
     * @param isVisible 
     */
    public void planned(Boolean isVisible){
        if(isVisible){
            pb_validate.setVisible(false);
            tf_IATAArrived.setEditable(false);
            tf_IATAStart.setEditable(false);
            tf_countryArrived.setEditable(false);
            tf_countryStart.setEditable(false);
            tf_dateStart.setEditable(false);
            tf_hoursStart.setEditable(false);
//            tf_price.setEditable(false);
            tf_time.setEditable(false);
            
//            cb_cityArrived.setEnabled(false);
//            cb_cityStart.setEnabled(false);
//            cb_pilote.setEnabled(false);
//            cb_copilote.setEnabled(false);
//            cb_staff1.setEnabled(false);
//            cb_staff2.setEnabled(false);
//            cb_staff3.setEnabled(false);
            
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cb_cityArrived;
    private javax.swing.JComboBox<String> cb_cityStart;
    private javax.swing.JComboBox<String> cb_copilote;
    private javax.swing.JComboBox<String> cb_pilote;
    private javax.swing.JComboBox<String> cb_staff1;
    private javax.swing.JComboBox<String> cb_staff2;
    private javax.swing.JComboBox<String> cb_staff3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jp_button;
    private javax.swing.JPanel jp_info;
    private javax.swing.JPanel jp_left;
    private javax.swing.JPanel jp_right;
    private javax.swing.JPanel jp_table;
    private javax.swing.JTable jt_listFlight;
    private javax.swing.JLabel lb_IATAArrived;
    private javax.swing.JLabel lb_IATAStart;
    private javax.swing.JLabel lb_cityArrived;
    private javax.swing.JLabel lb_cityStart;
    private javax.swing.JLabel lb_copilote;
    private javax.swing.JLabel lb_countryArrived;
    private javax.swing.JLabel lb_countryStart;
    private javax.swing.JLabel lb_dateArrived;
    private javax.swing.JLabel lb_dateStart;
    private javax.swing.JLabel lb_hoursArrived;
    private javax.swing.JLabel lb_hoursStart;
    private javax.swing.JLabel lb_numFlight;
    private javax.swing.JLabel lb_pilote;
    private javax.swing.JLabel lb_price;
    private javax.swing.JLabel lb_staff1;
    private javax.swing.JLabel lb_staff2;
    private javax.swing.JLabel lb_staff3;
    private javax.swing.JLabel lb_time;
    private javax.swing.JButton pb_delete;
    private javax.swing.JButton pb_init;
    private javax.swing.JButton pb_update;
    private javax.swing.JButton pb_validate;
    private javax.swing.JTextField tf_IATAArrived;
    private javax.swing.JTextField tf_IATAStart;
    private javax.swing.JTextField tf_countryArrived;
    private javax.swing.JTextField tf_countryStart;
    private javax.swing.JTextField tf_dateArrived;
    private javax.swing.JTextField tf_dateStart;
    private javax.swing.JTextField tf_hoursArrived;
    private javax.swing.JTextField tf_hoursStart;
    private javax.swing.JTextField tf_numFlight;
    private javax.swing.JTextField tf_price;
    private javax.swing.JTextField tf_time;
    // End of variables declaration//GEN-END:variables
}
